Initialize()
FindFiles()
SelectFile()
ReadFileContent()
ParseLines()
Scramble()
Quiz()

'
'---- Subroutines----
'
Sub Initialize
  'TextWindow.WriteLine("Initializing variables")
  folderName = "c:\quizzes"
  fileType = ".quiz"
  folderOffset = Text.GetLength(folderName)+2
  maxFileLines = 50
  numberOfChoices = 4
EndSub

'Find files of a specific type in a specified folder
'
'input variables  (name - type, description)
'    folderName - string, folder in which to look for files
'    fileType - string, indicates the files ending characters
'
'output variables (name - type, description)
'    allFileNames - array of strings, "1 based" set/list containing all the files in the folder at folderName
'     allFileCount - integer, the number of all the files in the folder at folderName
'    filesOfType - array of integers, "1 based" set/list containing the indices of the allFileNames array that match the specified type
'    typeMatchCount - integer, the number of matches found of the specified file type
'
Sub FindFiles
  'TextWindow.WriteLine("finding " + fileType + " files")
  allFileNames = File.GetFiles(folderName)
  allFileCount = Array.GetItemCount(allFileNames)
  typeMatchCount = 1
  For allFileIndex = 1 To allFileCount
    fileName = allFileNames[allFileIndex]
    If Text.EndsWith(fileName, fileType) Then
      'keep a list of the indices of the files matches
      filesOfType[typeMatchCount] = allFileIndex
      typeMatchCount = typeMatchCount + 1
    EndIf
  EndFor
  typeMatchCount = typeMatchCount -1 'adjust because of creating a 1 based array
EndSub

' present a list of choices in menu form given a set of pre-defined data
'
'input variables
'    typeMatchCount
'    allFileNames
'    filesOfType
'    folderOffset - integer, the number of characters to remove from the start of each name
'
'output variables
'    none
'
Sub ShowFileMenu
  TextWindow.WriteLine("")
  'TextWindow.WriteLine("showing " + fileType + " files")
  For fileIndex = 1 To typeMatchCount
    fullName = allFileNames[filesOfType[fileIndex]]
    'make the name "cleaner" for menu, but don't modify the original set of file names
    shortName = Text.GetSubTextToEnd(fullName, folderOffset)
    TextWindow.WriteLine(fileIndex + ") " + shortName)
  EndFor
  TextWindow.WriteLine("")
  TextWindow.Write("Enter Selection: ")
EndSub

'get the user's selection of an item in a menu
'
'input variables
'    typeMatchCount
'    filesOfType
'
'output variables
'    IndexOfSelectedFile - integer, the index into the allFileNames array the user wants to use
'
Sub SelectFile
  'TextWindow.WriteLine("Selecting " + fileType + " file")
  IndexOfSelectedFile = 0
  If typeMatchCount < 1 Then
    TextWindow.WriteLine("No Files of type " + fileType + " at " + folderName + " Found!")
  else
    choice = 0
    While choice < 1 Or choice > typeMatchCount
      ShowFileMenu()
      choice = TextWindow.ReadNumber()
    EndWhile
    IndexOfSelectedFile = filesOfType[choice]
  EndIf
EndSub

'Read the selected file's content
'This function reads the file a line at a time, I could not find anything in Small Basic that would indicate we
'have reached the end of the file when reading a line at a time.  There are several options to overcome this.
'1) Read the entire file in 1 read (File.ReadContents) then parse the giant string into multiple lines by
'looking for NewLine chars etc.
'2)Require an artificial EOF indicator ("EOF" on a line by itself at the end of the file)
'3)Stop when an empty line is encountered
'4)Stop when either an artificial EOF is encountered or some max number of lines is read (ignoring empty lines)
'
'The current implementation uses solution 4, though this is arbitrary
'
'input variables (name, type - description)
'    IndexOfSelectedFile, integer - the index into the allFileNames array for the selected file (0 if none)
'    allFileNames
'
'output variables
'    fileLines, array of strings - each array element contains a line from the file
'    fileLinesCount, integer - total number of lines read from the file
'
Sub ReadFileContent
  If IndexOfSelectedFile > 0 then
    selectedFileName = allFileNames[IndexOfSelectedFile]
    TextWindow.WriteLine("File selected: " + selectedFileName)
    lineNumberToRead = 1
    fileLinesCount = 1
    lineFromFile = ""
    While LineFromFile <> "EOF" and lineNumberToRead < maxFileLines
      LineFromFile = File.ReadLine(selectedFileName, lineNumberToRead)
      If LineFromFile <> "" Then
        fileLines[fileLinesCount] = LineFromFile
        questionOrder[fileLinesCount] = fileLinesCount
        fileLinesCount = fileLinesCount + 1
      EndIf
      lineNumberToRead = lineNumberToRead + 1
    EndWhile
    fileLinesCount = fileLinesCount - 1 'adjust because of creating a 1 based array
  EndIf
EndSub

Sub ShowFileContent
  For lineIndex = 1 To fileLinesCount
    TextWindow.WriteLine("")
    qaIndex = questionOrder[lineIndex]
    TextWindow.WriteLine(fileLines[qaIndex])
    TextWindow.WriteLine(question[qaIndex])
    TextWindow.WriteLine(answer[qaIndex])
  EndFor
EndSub

Sub ParseLines
  For lineIndex = 1 To fileLinesCount
    lineToParse = fileLines[lineIndex]
    position = Text.GetIndexOf(lineToParse, "|")
    question[lineIndex] = Text.GetSubText(lineToParse, 1, position - 1)
    answer[lineIndex] = Text.GetSubTextToEnd(lineToParse, position + 1)
  EndFor
EndSub

Sub ShuffleIt
  genericArraySize = Array.GetItemCount(shuffleArray)
  For shuffleItemIndex = genericArraySize To 1 Step -1
    randomShuffleItemIndex = Math.GetRandomNumber(shuffleItemIndex)
    temp = shuffleArray[shuffleItemIndex]
    shuffleArray[shuffleItemIndex] = shuffleArray[randomShuffleItemIndex]
    shuffleArray[randomShuffleItemIndex] = temp
  EndFor
EndSub

Sub Scramble
  shuffleArray = questionOrder
  ShuffleIt()
  questionOrder = shuffleArray
EndSub

Sub Quiz
  numberCorrect = 0
  For currentQuestion = 1 To fileLinesCount
    correctAnswerIndex = questionOrder[currentQuestion]
    SetChoices()
    ScrambleChoiceOrder()
    choice = -1
    While choice < 1 Or choice > numberOfChoices
      DisplayQuestion()
      choice = TextWindow.ReadNumber()
      If choice < 1 Or choice > numberOfChoices Then
        TextWindow.WriteLine("")
        TextWindow.WriteLine("Error. Please enter a valid number value between 1 and" + numberOfChoices)
      EndIf
    EndWhile
    TextWindow.WriteLine("")
    If multipleChoices[choice] = correctAnswerIndex Then
      TextWindow.WriteLine("Correct.")
      numberCorrect = numberCorrect + 1
    Else
      TextWindow.WriteLine("Incorrect.")
    EndIf
  EndFor
  
  TextWindow.WriteLine("")
  percentage = (numberCorrect / fileLinesCount) * 10000
  percentage = percentage / 100
  Math.Round(percentage)
  TextWindow.WriteLine("Final Score: " + numberCorrect +" out of " + fileLinesCount + " (" + percentage + "%)")
  TextWindow.WriteLine("")
EndSub

Sub SetChoices
  multipleChoices[1] = correctAnswerIndex
  multipleChoices[2] = multipleChoices[1]
  For y=2 To numberOfChoices
    duplicates = 1
    While duplicates <> 0
      multipleChoices[y] = Math.GetRandomNumber(fileLinesCount)
      duplicates = 0
      For z=1 To y-1
        If multipleChoices[z] = multipleChoices[y] Then
          duplicates = 1
        EndIf
      EndFor
    EndWhile
  EndFor
  'diagnostics - TODO: remove when ready to ship
  'TextWindow.WriteLine("Question/correct answer index: " + correctAnswerIndex)
  For y=1 To numberOfChoices
    'TextWindow.WriteLine("Choice " + y + ": " + multipleChoices[y])
  EndFor
EndSub

Sub ScrambleChoiceOrder
  shuffleArray = multipleChoices
  ShuffleIt()
  multipleChoices = shuffleArray
EndSub

Sub DisplayQuestion
  TextWindow.WriteLine("")
  TextWindow.Write("Question " + currentQuestion + " of " + fileLinesCount + ": " + question[correctAnswerIndex])
  TextWindow.WriteLine("")
  TextWindow.WriteLine("")
  For answerindex = 1 To numberOfChoices
    TextWindow.WriteLine(answerindex + ")" + answer[multipleChoices[answerindex]])
  EndFor
  TextWindow.WriteLine("")
  TextWindow.Write("Enter number of correct answer: ")
EndSub
